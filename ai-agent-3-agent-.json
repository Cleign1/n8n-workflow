{
  "createdAt": "2025-07-01T13:12:38.047Z",
  "updatedAt": "2025-07-07T15:25:54.072Z",
  "id": "wEG9Hn2KjrntbZVF",
  "name": "ai-agent-3-agent",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "http://192.168.1.10:5000/api/save-summary-result",
        "allowUnauthorizedCerts": true,
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "insufficient_stock_count",
              "value": "={{ $json.insufficient_stock_count }}"
            },
            {
              "name": "zero_stock_count",
              "value": "={{ $json.zero_stock_count }}"
            },
            {
              "name": "average_daily_sales",
              "value": "={{ $json.average_daily_sales }}"
            },
            {
              "name": "top_5_understocked",
              "value": "={{ $json.top_5_understocked }}"
            },
            {
              "name": "file_id",
              "value": "={{ $('Download file').first().json.id }}"
            }
          ]
        },
        "queryParametersUi": {
          "parameter": [
            {
              "name": "flask_task_id",
              "value": "={{ $('Webhook').last().json.query.flask_task_id }}"
            }
          ]
        }
      },
      "id": "a9b74e61-3fed-42ab-af52-5130a3a26fde",
      "name": "POST to Flask API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1000,
        220
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        340,
        220
      ],
      "id": "83cb1c2f-fc4b-4733-a118-244c34a488cf",
      "name": "Download file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "V5FSeoqbsp5FBsE9",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        560,
        220
      ],
      "id": "c0dba9ad-cc26-46a4-be59-cef4ebf04fca",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "path": "summarize",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -320,
        120
      ],
      "id": "dff8f31c-fea5-43c2-912f-8e5eca8737b9",
      "name": "Webhook",
      "webhookId": "1db6ea79-6989-4304-a8e8-f949e3d9b93d"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "prediction_result",
        "limit": 20,
        "filter": {
          "driveId": {
            "mode": "list",
            "value": "My Drive"
          },
          "folderId": {
            "__rl": true,
            "value": "1t2KayTYHE-npFSL59WcUKCaNbGHbkhMW",
            "mode": "list",
            "cachedResultName": "skripsi-json-data",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1t2KayTYHE-npFSL59WcUKCaNbGHbkhMW"
          },
          "whatToSearch": "files"
        },
        "options": {
          "fields": [
            "id",
            "name"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -100,
        220
      ],
      "id": "efcd42e5-a11f-4017-950a-4f85587204b9",
      "name": "Search files and folders",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "V5FSeoqbsp5FBsE9",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const files = $input.all().map(x => x.json);\n\nconst matched = files\n  .filter(f => f.name.includes('prediction_result_') && f.name.endsWith('.csv'))\n  .map(f => {\n    const match = f.name.match(/-(\\d{8})-(\\d{4})\\.csv$/);\n    if (!match) return null;\n\n    const [ , dateStr, timeStr ] = match;\n\n    const timestamp = new Date(\n      parseInt(dateStr.slice(0, 4)),      // year\n      parseInt(dateStr.slice(4, 6)) - 1,  // month (zero-based)\n      parseInt(dateStr.slice(6, 8)),      // day\n      parseInt(timeStr.slice(0, 2)),      // hour\n      parseInt(timeStr.slice(2, 4))       // minute\n    );\n\n    return {\n      json: {\n        ...f,\n        timestamp: timestamp.getTime()\n      }\n    };\n  })\n  .filter(item => item !== null);\n\n// Sort by most recent\nmatched.sort((a, b) => b.json.timestamp - a.json.timestamp);\n\n// Return only the newest file\nreturn [matched[0]];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        120,
        220
      ],
      "id": "c985b4da-3cda-471d-8496-e892de0370f4",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// Read input products\nconst products = $input.all().map(item => item.json);\n\n// Normalize field names and parse numbers/booleans\nconst cleaned = products.map(p => ({\n  id: p[\"Product ID\"],\n  name: p[\"Product Name\"],\n  current_stock: Number(p[\"Current Stock\"]),\n  average_daily_sales: Number(p[\"Average Daily Sales (Last 3 Days)\"]),\n  predicted_demand: Number(p[\"Predicted Demand (Next 3 Days)\"]),\n  is_sufficient: p[\"Is Stock Sufficient\"] === 'true' || p[\"Is Stock Sufficient\"] === true\n}));\n\n// Filter insufficient stock\nconst insufficient = cleaned.filter(p => !p.is_sufficient);\n\n// Count zero-stock\nconst zeroStock = cleaned.filter(p => p.current_stock === 0);\n\n// Compute total and average daily sales\nconst totalSales = cleaned.reduce((sum, p) => sum + (isNaN(p.average_daily_sales) ? 0 : p.average_daily_sales), 0);\nconst avgSales = totalSales / cleaned.length;\n\n// Top 5 understocked\nconst topUnderstocked = insufficient\n  .sort((a, b) => \n    (b.predicted_demand - b.current_stock) - \n    (a.predicted_demand - a.current_stock)\n  )\n  .slice(0, 5)\n  .map(p => ({\n    id: p.id,\n    name: p.name,\n    stock: p.current_stock,\n    predicted: p.predicted_demand\n  }));\n\n// Final summary\nreturn [{\n  json: {\n    total_products: cleaned.length,\n    insufficient_stock_count: insufficient.length,\n    zero_stock_count: zeroStock.length,\n    average_daily_sales: avgSales,\n    top_5_understocked: topUnderstocked\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        220
      ],
      "id": "659e2502-0a23-4d84-9dc4-011217de28ed",
      "name": "Summarize Stats"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -320,
        320
      ],
      "id": "a8f8173c-eb6b-4331-85a7-366ca305426f",
      "name": "When Executed by Another Workflow"
    }
  ],
  "connections": {
    "Download file": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Summarize Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Search files and folders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search files and folders": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize Stats": {
      "main": [
        [
          {
            "node": "POST to Flask API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Search files and folders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "f549f995-909d-468c-9d53-fc35ea67e66c",
  "triggerCount": 1,
  "tags": []
}