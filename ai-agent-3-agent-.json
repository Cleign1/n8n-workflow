{
  "createdAt": "2025-07-01T13:12:38.047Z",
  "updatedAt": "2025-07-01T18:36:33.879Z",
  "id": "wEG9Hn2KjrntbZVF",
  "name": "ai-agent-3-agent",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "http://192.168.1.16:8084/4a56d50b-0a98-4c11-9d0e-8773b75d31b0",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "total_product",
              "value": "={{ $json.total_products }}"
            },
            {
              "name": "insufficient_stock_count",
              "value": "={{ $json.insufficient_stock_count }}"
            },
            {
              "name": "zero_stock_count",
              "value": "={{ $json.zero_stock_count }}"
            },
            {
              "name": "average_daily_sales",
              "value": "={{ $json.average_daily_sales }}"
            },
            {
              "name": "top_5_understocked",
              "value": "={{ $json.top_5_understocked }}"
            }
          ]
        }
      },
      "id": "a9b74e61-3fed-42ab-af52-5130a3a26fde",
      "name": "POST to Flask API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1840,
        120
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        340,
        120
      ],
      "id": "83cb1c2f-fc4b-4733-a118-244c34a488cf",
      "name": "Download file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "V5FSeoqbsp5FBsE9",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all().map(x => x.json);\n\nconst insufficient = items.filter(p => !p.is_stock_sufficient);\nconst zeroStock = items.filter(p => p.current_stock === 0);\nconst totalSales = items.reduce((sum, p) => sum + p.average_daily_sales_last_3_days, 0);\nconst avgSales = totalSales / items.length;\n\nconst topUnderstocked = insufficient\n  .sort((a, b) => (b.predicted_demand_next_3_days - b.current_stock) - (a.predicted_demand_next_3_days - a.current_stock))\n  .slice(0, 5)\n  .map(p => ({\n    id: p.product_id,\n    name: p.product_name,\n    stock: p.current_stock,\n    predicted: p.predicted_demand_next_3_days\n  }));\n\nreturn [{\n  json: {\n    total_products: items.length,\n    insufficient_stock_count: insufficient.length,\n    zero_stock_count: zeroStock.length,\n    average_daily_sales: avgSales,\n    top_5_understocked: topUnderstocked\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1000,
        120
      ],
      "id": "659e2502-0a23-4d84-9dc4-011217de28ed",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        560,
        120
      ],
      "id": "c0dba9ad-cc26-46a4-be59-cef4ebf04fca",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        780,
        120
      ],
      "id": "4c3d0cb1-5110-49a3-9f36-e45d0c8745c7",
      "name": "Split Out"
    },
    {
      "parameters": {
        "path": "summarize",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -320,
        120
      ],
      "id": "dff8f31c-fea5-43c2-912f-8e5eca8737b9",
      "name": "Webhook",
      "webhookId": "1db6ea79-6989-4304-a8e8-f949e3d9b93d"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "prediction_result",
        "limit": 20,
        "filter": {
          "driveId": {
            "mode": "list",
            "value": "My Drive"
          },
          "folderId": {
            "__rl": true,
            "value": "1t2KayTYHE-npFSL59WcUKCaNbGHbkhMW",
            "mode": "list",
            "cachedResultName": "skripsi-json-data",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1t2KayTYHE-npFSL59WcUKCaNbGHbkhMW"
          },
          "whatToSearch": "files"
        },
        "options": {
          "fields": [
            "id",
            "name"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -100,
        120
      ],
      "id": "efcd42e5-a11f-4017-950a-4f85587204b9",
      "name": "Search files and folders",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "V5FSeoqbsp5FBsE9",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const files = $input.all().map(x => x.json);\n\nconst matched = files\n  .filter(f => f.name.includes('prediction_result_') && f.name.endsWith('.json'))\n  .map(f => {\n    const match = f.name.match(/-(\\d{8})-(\\d{4})\\.json$/);\n    if (!match) return null;\n\n    const [ , dateStr, timeStr ] = match;\n\n    const timestamp = new Date(\n      parseInt(dateStr.slice(0, 4)),      // year\n      parseInt(dateStr.slice(4, 6)) - 1,  // month (zero-based)\n      parseInt(dateStr.slice(6, 8)),      // day\n      parseInt(timeStr.slice(0, 2)),      // hour\n      parseInt(timeStr.slice(2, 4))       // minute\n    );\n\n    return {\n      json: {\n        ...f,\n        timestamp: timestamp.getTime()\n      }\n    };\n  })\n  .filter(item => item !== null);\n\n// Sort by most recent\nmatched.sort((a, b) => b.json.timestamp - a.json.timestamp);\n\n// Return only the newest file\nreturn [matched[0]];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        120,
        120
      ],
      "id": "c985b4da-3cda-471d-8496-e892de0370f4",
      "name": "Code1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Inventory Data:\n{{ JSON.stringify($json) }}\n\nPlease summarize the data and provide the following:\n1. A general overview of the stock situation.\n2. Which products are understocked and require attention.\n3. Actionable recommendations (e.g., which products should be prioritized for restocking, based on predicted demand).\n4. Any other relevant insights from the data that could help in managing inventory more efficiently.\n\nThe output should be in a concise, easy-to-read format.\n",
        "options": {
          "systemMessage": "You are a business analyst who provides insights into inventory data. Your job is to generate a concise, plain-text summary for the following inventory data. You should include insights about the stock levels, which products are understocked, and any actionable recommendations."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1480,
        120
      ],
      "id": "591e9bbb-4c83-490d-a40b-f92277d5d2e0",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1340,
        340
      ],
      "id": "fbb2c162-5dcd-47be-b3bb-61c091b91472",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "fnra6HdsBzeXHUit",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1480,
        340
      ],
      "id": "1c1820f8-c7bd-402a-b2da-6c2e17c4931b",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "ztWffZLko4g9ZKsG",
          "name": "n8n"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df4d6c0a-cf9b-49b6-a7ce-d255a8e14cc2",
              "name": "session_id",
              "value": "={{ $now.format('yyyyMMddHHmmss') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1220,
        120
      ],
      "id": "2702b4c8-4d85-43cc-bc44-4a1b9350a8ba",
      "name": "Edit Fields"
    }
  ],
  "connections": {
    "Download file": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Search files and folders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search files and folders": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "POST to Flask API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "1aef6b9d-4d1c-4425-8995-1eca03ee7400",
  "triggerCount": 1,
  "tags": []
}