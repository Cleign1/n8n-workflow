{
  "createdAt": "2025-06-22T10:48:20.352Z",
  "updatedAt": "2025-06-26T03:06:43.126Z",
  "id": "ZwDhjMsMKPEbPCPy",
  "name": "ai_agent_1_newest",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update_stock",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -140,
        -120
      ],
      "id": "fa82b970-3398-48b3-85c0-7d50944040d3",
      "name": "Webhook",
      "webhookId": "a90e3eaa-296f-48ff-9f22-67076d7720f8"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3ac95553-fa08-4b00-bf6f-6fef52bccde7",
              "name": "body",
              "value": "={{ $json.body }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        80,
        -120
      ],
      "id": "567cf488-938c-468d-87c7-5affe381c5aa",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "const salesData = $input.first().json.body;\n\n// 1. Validate the incoming data\nif (!Array.isArray(salesData) || salesData.length === 0) {\n  // If there's no valid data, stop the workflow by returning an empty array.\n  return [];\n}\n\n// 2. Transform the sales data into a SQL VALUES list.\n// This creates a string like: \"(123, 5), (456, 2), (789, 10)\"\n// We also ensure the data types are correct (integers).\nconst valuesList = salesData\n  .map(sale => {\n    const productIndex = parseInt(sale.index, 10);\n    const quantitySold = parseInt(sale.quantity_sold, 10);\n\n    // Basic validation for each item\n    if (isNaN(productIndex) || isNaN(quantitySold)) {\n      return null;\n    }\n    return `(${productIndex}, ${quantitySold})`;\n  })\n  .filter(Boolean) // Remove any null entries from invalid sales items\n  .join(', ');\n\n// If after filtering there are no valid values, stop.\nif (!valuesList) {\n  return [];\n}\n\n\n// 3. Construct the final, powerful UPDATE query.\n// This query updates the 'amazon_dataset' table by subtracting the\n// 'quantity_sold' from the current 'stock' for all matching products in one go.\nconst updateQuery = `\nUPDATE public.amazon_dataset AS ad\nSET\n    stock = ad.stock - v.quantity_sold\nFROM (\n    VALUES ${valuesList}\n) AS v(product_index, quantity_sold)\nWHERE ad.index = v.product_index;\n`;\n\n// 4. Output the generated query for the next node to use.\nreturn [{ json: { query: updateQuery } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        300,
        -120
      ],
      "id": "c1202da4-79b5-4c27-ae9f-dc76b511fcae",
      "name": "Prepare Bulk Update Query"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.query }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        520,
        -120
      ],
      "id": "67f94824-4011-4f08-bf6d-6664b287b423",
      "name": "Execute Bulk Update",
      "credentials": {
        "postgres": {
          "id": "ufLqaq0vJt3QUgxO",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"Process completed successfully\",\n  \"message\": \"Stok telah berhasil diperbarui.\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        740,
        -120
      ],
      "id": "85227f1a-dca9-4242-823f-20143a9ac363",
      "name": "Respond to Webhook1"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Prepare Bulk Update Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Bulk Update Query": {
      "main": [
        [
          {
            "node": "Execute Bulk Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Bulk Update": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "7957eecd-5a59-4ae7-9108-cac73072d291",
  "triggerCount": 1,
  "tags": []
}