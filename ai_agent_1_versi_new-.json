{
  "createdAt": "2025-05-31T07:58:49.584Z",
  "updatedAt": "2025-06-11T08:36:56.720Z",
  "id": "ZUWI4WKB1w7PNOQB",
  "name": "ai_agent_1_versi_new",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update_stock",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -680,
        720
      ],
      "id": "859f6193-5e29-4a89-9317-e55f75e618a4",
      "name": "Webhook1",
      "webhookId": "4f67c9d9-7753-4aaa-8fd3-0227afc35562"
    },
    {
      "parameters": {
        "jsCode": "const salesData = $input.first().json.body;\nif (!Array.isArray(salesData)) {\n  console.error(\"Data penjualan harus berupa array.\")\n  return [{ json: { productIndexes: [], error: \"Sales data is not an array and cannot be processed.\"} }];\n}\nconst productIndexes = salesData.map(sale => sale.index).filter(index => index !== undefined && index !== null);\nif (productIndexes.length === 0 && salesData.length > 0) {\n  return [{ json: { productIndexes: [], error: \"No valid product indexes found in sales data.\"} }];\n}\nreturn [{ json: { productIndexes } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        720
      ],
      "id": "e28ff3a3-fc2d-4f4e-9710-8e1df00963e1",
      "name": "Prepare Product1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM public.amazon_dataset\nWHERE index IN ({{ $json.productIndexes && $json.productIndexes.length > 0 ? $json.productIndexes.join(', ') : null }})",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        280,
        720
      ],
      "id": "1d51131b-60d1-49d4-b0f5-f5b348975a3d",
      "name": "Get Product Data1",
      "credentials": {
        "postgres": {
          "id": "ufLqaq0vJt3QUgxO",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Mengambil semua item output dari node \"Get Product Data\"\nconst productDataItems = $(\"Get Product Data1\").all();\n\n// Ekstrak objek .json dari setiap item dan simpan ke dalam array baru\n// Ini adalah daftar produk aktual dari database yang akan kita gunakan untuk pencocokan\nconst productsInDatabase = productDataItems.map(item => item.json);\nif (productsInDatabase.length > 0) {\n  console.log(\"Produk Pertama dari Database (setelah .map):\", JSON.stringify(productsInDatabase[0], null, 2));\n} else {\n  console.log(\"Tidak ada produk yang diambil dari database (productsInDatabase kosong setelah .map).\");\n}\n\n// Data penjualan dari webhook\nconst salesData = $('Webhook1').first().json.body;\n\nlet outputItems = []; // Array untuk menampung semua item yang akan di-output oleh node ini\n\n// 1. Validasi Awal Data Penjualan (salesData)\nif (!Array.isArray(salesData)) {\n  outputItems.push({\n    json: {\n      type: \"critical_error\",\n      errorType: \"InvalidSalesDataFormat\",\n      message: \"Data penjualan yang diterima bukan array.\",\n      originalSalesData: salesData\n    }\n  });\n  return outputItems;\n}\n\nif (salesData.length === 0) {\n  return [];\n}\n\n// 2. Proses Setiap Item Penjualan\nsalesData.forEach(sale => {\n  // Pastikan setiap item penjualan (sale) memiliki 'index' produk\n  if (sale.index === undefined || sale.index === null) {\n    console.warn(`Item penjualan tidak memiliki 'index' yang valid: ${JSON.stringify(sale)}`);\n    outputItems.push({\n      json: {\n        type: \"product_error\",\n        error_details: \"Item penjualan tidak memiliki 'index' yang valid.\",\n        sale_item: sale\n      }\n    });\n    return; // Lanjut ke item penjualan berikutnya\n  }\n\n  // Konversi 'sale.index' dan 'product.index' ke tipe data yang konsisten (misalnya, String) untuk perbandingan\n  // Ini penting untuk menghindari masalah ketidakcocokan tipe (angka vs string)\n  const saleIndexToCompare = String(sale.index).trim(); // Hapus spasi berlebih jika ada\n\n  // Cari produk yang sesuai di 'productsInDatabase' (yang sudah berisi objek .json)\n  // Pastikan 'p.index' juga dikonversi ke String untuk perbandingan yang adil\n  const productInDb = productsInDatabase.find(p => {\n    if (p && (p.index !== undefined && p.index !== null)) {\n      const dbIndexToCompare = String(p.index).trim();\n      return dbIndexToCompare === saleIndexToCompare;\n    }\n    return false; // Jika p.index tidak valid, jangan cocokkan\n  });\n\n  if (productInDb) {\n    const quantitySold = Number(sale.quantity_sold);\n    const currentStock = Number(productInDb.stock);\n\n    if (isNaN(quantitySold)) {\n      console.warn(`Kuantitas terjual tidak valid untuk produk index \"${saleIndexToCompare}\": ${sale.quantity_sold}`);\n      outputItems.push({\n        json: {\n          type: \"data_error\",\n          product_name: productInDb.name || sale.name || null,\n          product_index: productInDb.index,\n          message: `Kuantitas terjual (quantity_sold) tidak valid: ${sale.quantity_sold}`\n        }\n      });\n      return; \n    }\n    if (isNaN(currentStock)) {\n      console.warn(`Stok saat ini tidak valid untuk produk index \"${saleIndexToCompare}\" di database.`);\n      outputItems.push({\n        json: {\n          type: \"data_error\",\n          product_name: productInDb.name || sale.name || null,\n          product_index: productInDb.index,\n          message: `Stok produk di database tidak valid (NaN). Nilai stok: ${productInDb.stock}`\n        }\n      });\n      return; \n    }\n\n    const newStock = currentStock - quantitySold;\n    outputItems.push({\n      json: {\n        index: productInDb.index,\n        stock: Math.max(0, newStock)\n      }\n    });\n  } else {\n    console.warn(`Produk dengan index \"${saleIndexToCompare}\" TIDAK DITEMUKAN di database.`);\n    outputItems.push({\n      json: {\n        type: \"product_not_found\",\n        product_name: sale.name || null,\n        product_index: sale.index, \n        quantity_sold: sale.quantity_sold,\n        message: `Produk dengan index \"${saleIndexToCompare}\" (Nama: \"${sale.name || 'Tidak ada nama'}\") tidak ditemukan di database.`\n      }\n    });\n  }\n});\n\nconsole.log(\"Output Akhir dari 'Process Sales & Identify Issues':\", JSON.stringify(outputItems, null, 2));\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        760,
        720
      ],
      "id": "912bcfad-b165-403d-85c2-26a1862bb3f8",
      "name": "Process Sales & Identify Issues1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "407dceb4-4397-4dc7-a5cf-38fb20ed61c7",
              "leftValue": "={{ $json.stock }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        960,
        720
      ],
      "id": "a83e2c6d-ff17-44de-a19b-103c6242a894",
      "name": "Route Data1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"Process completed\",\n  \"message\": \"Proses telah selesai\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        1400,
        720
      ],
      "id": "3e31103f-ef8b-4d05-bfce-6a2399082095",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "jsCode": "// 'items' adalah input ke node ini, yang berasal dari salah satu output node IF (\"Route Data\").\n// Setiap 'item' dalam 'items' adalah objek yang menandakan suatu masalah.\n\n// 1. Catat data yang diterima untuk debugging\nconsole.log(\"AI Agent (Placeholder) - Menerima data untuk ditangani:\");\nitems.forEach((item, index) => {\n  console.log(`Item[${index}]: ${JSON.stringify(item.json, null, 2)}`);\n});\n\n// 2. Proses setiap item masalah dan buat pesan notifikasi\n// Array untuk menampung hasil pemrosesan oleh AI placeholder ini\nlet processedAiItems = [];\n\nitems.forEach(item => {\n  let notificationMessage = \"Tidak ada tindakan spesifik yang diambil oleh AI placeholder untuk item ini.\";\n  let aiActionTaken = \"Logged\"; // Tindakan default\n\n  // Ambil data JSON dari item\n  const issueDetails = item.json;\n\n  // Buat pesan notifikasi berdasarkan jenis masalah ('type')\n  if (issueDetails.type === 'product_not_found') {\n    notificationMessage = `PERHATIAN: Produk tidak ditemukan di database. \n    Nama Produk (dari sales): \"${issueDetails.product_name || 'N/A'}\", \n    Index Produk (dari sales): \"${issueDetails.product_index}\", \n    Kuantitas Terjual: ${issueDetails.quantity_sold}. \n    Saran: Verifikasi data produk atau tambahkan produk baru jika perlu.`;\n    aiActionTaken = \"Logged product_not_found, generated notification suggestion\";\n\n  } else if (issueDetails.type === 'critical_error') {\n    notificationMessage = `ERROR KRITIS: ${issueDetails.message}. \n    Detail Data Asli: ${JSON.stringify(issueDetails.originalSalesData, null, 2)}. \n    Saran: Segera periksa sumber data penjualan atau format webhook.`;\n    aiActionTaken = \"Logged critical_error, generated notification suggestion\";\n\n  } else if (issueDetails.type === 'product_error') {\n    notificationMessage = `ERROR DATA PRODUK (Penjualan): ${issueDetails.error_details}. \n    Detail Item Penjualan: ${JSON.stringify(issueDetails.sale_item, null, 2)}. \n    Saran: Periksa item penjualan yang masuk, pastikan memiliki semua field yang diperlukan (misalnya, 'index').`;\n    aiActionTaken = \"Logged product_error, generated notification suggestion\";\n  \n  } else if (issueDetails.type === 'data_error') { // Menangani tipe error baru dari node sebelumnya\n    notificationMessage = `ERROR VALIDASI DATA: ${issueDetails.message}. \n    Index Produk: \"${issueDetails.product_index}\", \n    Nama Produk: \"${issueDetails.product_name || 'N/A'}\".\n    Saran: Periksa data terkait produk ini pada data penjualan atau database.`;\n    aiActionTaken = \"Logged data_error, generated notification suggestion\";\n\n  } else {\n    notificationMessage = `Jenis masalah tidak dikenal diterima: ${JSON.stringify(issueDetails)}.`;\n    aiActionTaken = \"Logged unknown issue type\";\n  }\n\n  // Untuk demonstrasi, kita akan membuat item baru yang berisi pesan notifikasi ini.\n  // Dalam skenario nyata, Anda mungkin akan mengirim ini ke sistem notifikasi (Email, Slack, dll.)\n  // atau melakukan pemanggilan API ke layanan AI.\n  processedAiItems.push({\n    json: {\n      original_issue: issueDetails, // Menyimpan detail masalah asli\n      ai_generated_notification: notificationMessage,\n      ai_action_placeholder: aiActionTaken,\n      status: \"processed_by_ai_placeholder\",\n      timestamp_ai_processed: new Date().toISOString()\n    }\n  });\n});\n\n// 3. Kembalikan item yang telah diproses oleh AI placeholder\n// Item-item ini bisa diteruskan ke node notifikasi atau node logging lainnya.\nreturn processedAiItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1180,
        800
      ],
      "id": "59e92b35-59ac-4492-8cbb-369de991ac06",
      "name": "Process Sales and identify Issues"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": "public",
        "table": "amazon_dataset",
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "index": 0,
            "ratings": 0,
            "no_of_ratings": 0,
            "discount_price_idr": 0,
            "actual_price_idr": 0,
            "stock": 0
          },
          "matchingColumns": [
            "index"
          ],
          "schema": [
            {
              "id": "index",
              "displayName": "index",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "main_category",
              "displayName": "main_category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "sub_category",
              "displayName": "sub_category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ratings",
              "displayName": "ratings",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "no_of_ratings",
              "displayName": "no_of_ratings",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "discount_price_idr",
              "displayName": "discount_price_idr",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "actual_price_idr",
              "displayName": "actual_price_idr",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "stock",
              "displayName": "stock",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1180,
        660
      ],
      "id": "23a8bdd5-30c9-4626-a67d-1de573ae6894",
      "name": "Update Produk Database1",
      "credentials": {
        "postgres": {
          "id": "ufLqaq0vJt3QUgxO",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3c7f7ddb-148b-4dc9-b5d1-b49484c74961",
              "leftValue": "={{ $json.body.every(item => /^\\d+$/.test(item.index)) }}",
              "rightValue": "={{ $json.body }}",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "6614e1c9-637d-45f1-a345-845894c9517b",
              "leftValue": "={{ $json.body.some(item => !/^\\d{4}-\\d{2}-\\d{2}$/.test(item.date)) }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "db86cc64-2543-42a4-9e76-accbc9eff09b",
              "leftValue": "={{ $json.body.every(item => item.hasOwnProperty('quantity_sold') && /^\\d+$/.test(item.quantity_sold)) }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -440,
        740
      ],
      "id": "7a517e68-1254-467b-8440-ea858346d4b3",
      "name": "If"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"Error\": \"Terjadi Error, Cek Index, Date, dan Quantity sold. Pastikan Formattnya benar\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        -140,
        920
      ],
      "id": "59f02758-7408-4b86-8772-be6fc918ca21",
      "name": "Error"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3ac95553-fa08-4b00-bf6f-6fef52bccde7",
              "name": "body",
              "value": "={{ $json.body }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -140,
        720
      ],
      "id": "269c0979-5105-4a08-ac93-e989c048f1a9",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"Error\": \"Nama Produk ada yang tidak sesuai\"\n  \"Index\": {{ $json.index }}\n  \"Nama\": {{ $json.name }}\n}",
        "options": {
          "responseCode": 400
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        760,
        900
      ],
      "id": "08cfd883-5533-41ff-a412-b054d78ea042",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "87bdcd8f-d673-4916-876d-fafcc6d611d1",
              "leftValue": "={{ $('Edit Fields').item.json.body[0].index }}",
              "rightValue": "={{ $json.index.toString() }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "c2ed11f5-dd1d-493e-8a2b-b401fbb8872b",
              "leftValue": "={{ $json.name }}",
              "rightValue": "={{ $('Edit Fields').item.json.body[0].name }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        480,
        720
      ],
      "id": "b8b2eea3-53ee-4490-b0f3-cbbef6ed4802",
      "name": "Cek apakah nama produk sama dengan database"
    }
  ],
  "connections": {
    "Webhook1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Product1": {
      "main": [
        [
          {
            "node": "Get Product Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Product Data1": {
      "main": [
        [
          {
            "node": "Cek apakah nama produk sama dengan database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Sales & Identify Issues1": {
      "main": [
        [
          {
            "node": "Route Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Data1": {
      "main": [
        [
          {
            "node": "Update Produk Database1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Sales and identify Issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Sales and identify Issues": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Produk Database1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Prepare Product1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cek apakah nama produk sama dengan database": {
      "main": [
        [
          {
            "node": "Process Sales & Identify Issues1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "97bc604b-3627-470d-ac45-0396eb9a1f83",
  "triggerCount": 0,
  "tags": []
}