{
  "createdAt": "2025-06-21T08:23:34.139Z",
  "updatedAt": "2025-06-21T09:47:39.724Z",
  "id": "3aX0f1uOThdyORJ6",
  "name": "ai_agent_1_versi_new",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "jsCode": "const salesData = $input.first().json.body;\nif (!Array.isArray(salesData)) {\n  return [{ json: { productIndexes: [], error: \"Sales data is not an array and cannot be processed.\"} }];\n}\nconst productIndexes = salesData.map(sale => sale.index).filter(index => index !== undefined && index !== null);\nif (productIndexes.length === 0 && salesData.length > 0) {\n  return [{ json: { productIndexes: [], error: \"No valid product indexes found in sales data.\"} }];\n}\nreturn [{ json: { productIndexes } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1480,
        0
      ],
      "id": "78a5921e-4e4e-4661-b720-42ec825ed8b7",
      "name": "Prepare Product1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM public.amazon_dataset\nWHERE index IN ({{ $json.productIndexes && $json.productIndexes.length > 0 ? $json.productIndexes.join(', ') : null }})\nORDER BY index ASC",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1260,
        0
      ],
      "id": "329b6d4c-7935-45d7-9a1e-548f6cfec586",
      "name": "Get Product Data1",
      "credentials": {
        "postgres": {
          "id": "khc9nZXORM0xAEhP",
          "name": "amazon_product"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Mengambil semua item output dari node \"Get Product Data\"\nconst productDataItems = $(\"Get Product Data1\").all();\n\n// Ekstrak objek .json dari setiap item dan simpan ke dalam array baru\n// Ini adalah daftar produk aktual dari database yang akan kita gunakan untuk pencocokan\nconst productsInDatabase = productDataItems.map(item => item.json);\nif (productsInDatabase.length > 0) {\n  console.log(\"Produk Pertama dari Database (setelah .map):\", JSON.stringify(productsInDatabase[0], null, 2));\n} else {\n  console.log(\"Tidak ada produk yang diambil dari database (productsInDatabase kosong setelah .map).\");\n}\n\n// Data penjualan dari webhook\nconst salesData = $('Webhook').first().json.body;\n\nlet outputItems = []; // Array untuk menampung semua item yang akan di-output oleh node ini\n\n// 1. Validasi Awal Data Penjualan (salesData)\nif (!Array.isArray(salesData)) {\n  outputItems.push({\n    json: {\n      type: \"critical_error\",\n      errorType: \"InvalidSalesDataFormat\",\n      message: \"Data penjualan yang diterima bukan array.\",\n      originalSalesData: salesData\n    }\n  });\n  return outputItems;\n}\n\nif (salesData.length === 0) {\n  return [];\n}\n\n// 2. Proses Setiap Item Penjualan\nsalesData.forEach(sale => {\n  // Pastikan setiap item penjualan (sale) memiliki 'index' produk\n  if (sale.index === undefined || sale.index === null) {\n    console.warn(`Item penjualan tidak memiliki 'index' yang valid: ${JSON.stringify(sale)}`);\n    outputItems.push({\n      json: {\n        type: \"product_error\",\n        error_details: \"Item penjualan tidak memiliki 'index' yang valid.\",\n        sale_item: sale\n      }\n    });\n    return; // Lanjut ke item penjualan berikutnya\n  }\n\n  // Konversi 'sale.index' dan 'product.index' ke tipe data yang konsisten (misalnya, String) untuk perbandingan\n  // Ini penting untuk menghindari masalah ketidakcocokan tipe (angka vs string)\n  const saleIndexToCompare = String(sale.index).trim(); // Hapus spasi berlebih jika ada\n\n  // Cari produk yang sesuai di 'productsInDatabase' (yang sudah berisi objek .json)\n  // Pastikan 'p.index' juga dikonversi ke String untuk perbandingan yang adil\n  const productInDb = productsInDatabase.find(p => {\n    if (p && (p.index !== undefined && p.index !== null)) {\n      const dbIndexToCompare = String(p.index).trim();\n      return dbIndexToCompare === saleIndexToCompare;\n    }\n    return false; // Jika p.index tidak valid, jangan cocokkan\n  });\n\n  if (productInDb) {\n    const quantitySold = Number(sale.quantity_sold);\n    const currentStock = Number(productInDb.stock);\n\n    if (isNaN(quantitySold)) {\n      console.warn(`Kuantitas terjual tidak valid untuk produk index \"${saleIndexToCompare}\": ${sale.quantity_sold}`);\n      outputItems.push({\n        json: {\n          type: \"data_error\",\n          product_name: productInDb.name || sale.name || null,\n          product_index: productInDb.index,\n          message: `Kuantitas terjual (quantity_sold) tidak valid: ${sale.quantity_sold}`\n        }\n      });\n      return; \n    }\n    if (isNaN(currentStock)) {\n      console.warn(`Stok saat ini tidak valid untuk produk index \"${saleIndexToCompare}\" di database.`);\n      outputItems.push({\n        json: {\n          type: \"data_error\",\n          product_name: productInDb.name || sale.name || null,\n          product_index: productInDb.index,\n          message: `Stok produk di database tidak valid (NaN). Nilai stok: ${productInDb.stock}`\n        }\n      });\n      return; \n    }\n\n    const newStock = currentStock - quantitySold;\n    outputItems.push({\n      json: {\n        index: productInDb.index,\n        stock: Math.max(0, newStock)\n      }\n    });\n  } else {\n    console.warn(`Produk dengan index \"${saleIndexToCompare}\" TIDAK DITEMUKAN di database.`);\n    outputItems.push({\n      json: {\n        type: \"product_not_found\",\n        product_name: sale.name || null,\n        product_index: sale.index, \n        quantity_sold: sale.quantity_sold,\n        message: `Produk dengan index \"${saleIndexToCompare}\" (Nama: \"${sale.name || 'Tidak ada nama'}\") tidak ditemukan di database.`\n      }\n    });\n  }\n});\n\nconsole.log(\"Output Akhir dari 'Process Sales & Identify Issues':\", JSON.stringify(outputItems, null, 2));\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1040,
        0
      ],
      "id": "21a728ac-e3d8-4524-9285-620e3a14125e",
      "name": "Process Sales & Identify Issues1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"Process completed\",\n  \"message\": \"Proses telah selesai\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        -600,
        0
      ],
      "id": "1f182ed5-e65e-4e74-ae53-b3c17f96057e",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": "public",
        "table": "amazon_dataset",
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "index": 0,
            "ratings": 0,
            "no_of_ratings": 0,
            "discount_price_idr": 0,
            "actual_price_idr": 0,
            "stock": 0
          },
          "matchingColumns": [
            "index"
          ],
          "schema": [
            {
              "id": "index",
              "displayName": "index",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "main_category",
              "displayName": "main_category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "sub_category",
              "displayName": "sub_category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ratings",
              "displayName": "ratings",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "no_of_ratings",
              "displayName": "no_of_ratings",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "discount_price_idr",
              "displayName": "discount_price_idr",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "actual_price_idr",
              "displayName": "actual_price_idr",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "stock",
              "displayName": "stock",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -820,
        0
      ],
      "id": "2019e88d-ed5c-4db1-a7bf-9f95c19600a7",
      "name": "Update Produk Database1",
      "credentials": {
        "postgres": {
          "id": "khc9nZXORM0xAEhP",
          "name": "amazon_product"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3ac95553-fa08-4b00-bf6f-6fef52bccde7",
              "name": "body",
              "value": "={{ $json.body }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1700,
        0
      ],
      "id": "3c1e08ea-a961-4f83-a165-9597e6d62f0c",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update_stock",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1920,
        0
      ],
      "id": "fabfd79f-575f-4a23-8444-3784c1df9af6",
      "name": "Webhook",
      "webhookId": "a90e3eaa-296f-48ff-9f22-67076d7720f8"
    }
  ],
  "connections": {
    "Prepare Product1": {
      "main": [
        [
          {
            "node": "Get Product Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Product Data1": {
      "main": [
        [
          {
            "node": "Process Sales & Identify Issues1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Sales & Identify Issues1": {
      "main": [
        [
          {
            "node": "Update Produk Database1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Produk Database1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Prepare Product1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "a4443c1d-a6ba-425d-afdf-918581d29fe8",
  "triggerCount": 1,
  "tags": []
}