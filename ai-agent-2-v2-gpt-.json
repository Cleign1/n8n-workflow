{
  "createdAt": "2025-06-22T10:47:44.219Z",
  "updatedAt": "2025-06-22T10:47:50.589Z",
  "id": "TJmI4L76eLrfq5WW",
  "name": "ai-agent-2-v2-gpt",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COUNT(*) as total_rows FROM amazon_dataset;",
        "options": {}
      },
      "name": "Get Total Rows",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -1360,
        180
      ],
      "id": "4cda3e48-a87a-4752-a9f4-dd04ce691a3d",
      "credentials": {
        "postgres": {
          "id": "ufLqaq0vJt3QUgxO",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare JSON content for writing\nconst data = $input.first().json;\nconst batchResult = data.batchResult;\n\nlet jsonContent;\n\nif (data.isFirstBatch) {\n  // First batch: create complete JSON structure\n  const fileStructure = {\n    processedAt: new Date().toISOString().replace('T', ' ').substring(0, 19),\n    processedBy: 'Cleign1',\n    taskId: data.taskId,\n    date: data.inputDate,\n    totalRows: data.totalRows,\n    totalBatches: data.totalBatches,\n    batchSize: data.batchSize,\n    batches: [batchResult]\n  };\n  \n  jsonContent = JSON.stringify(fileStructure, null, 2);\n} else {\n  // Subsequent batches: prepare batch data to append\n  jsonContent = ',\\n    ' + JSON.stringify(batchResult, null, 4).replace(/\\n/g, '\\n    ');\n}\n\nreturn [{\n  json: {\n    ...data,\n    jsonContent: jsonContent\n  }\n}];"
      },
      "name": "Prepare JSON Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -260,
        0
      ],
      "id": "5f577e6e-510f-416b-a392-d33fc5b9ae0b"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "first-batch-check",
              "leftValue": "={{ $json.isFirstBatch }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            },
            {
              "id": "b707253e-63e8-4d6c-a55e-e5aca9e5c688",
              "leftValue": "={{ $json.batchResult.batchNumber }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "name": "Is First Batch?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -40,
        0
      ],
      "id": "25300392-0a21-48d0-900f-9a0c934ea1da"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $json.fileName }}",
        "dataPropertyName": "jsonContent",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        400,
        100
      ],
      "id": "db9f5e26-fce3-42bb-8ed5-9a9b24aed885",
      "name": "Append Batch"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "agentic-ai-2-paging",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1580,
        180
      ],
      "id": "a5162ed4-3c49-4ba7-99a9-ecdb18385a64",
      "name": "Webhook",
      "webhookId": "0909f34c-da13-493d-984e-901eb3972a1e"
    },
    {
      "parameters": {
        "jsCode": "// Initialize pagination parameters with dynamic total rows\nconst inputData = $('Webhook').first().json.body;\nlet inputDate = $('Webhook').first().json.body.prediction_date;\nconst taskId = $('Webhook').first().json.body.task_id;\n\nif (!inputDate) {\n  // Use current date if no date provided\n  inputDate = '2025-04-04'; // Updated to current date\n}\n\n// Get total rows from database - fix the data access\nconst totalRowsResult = $input.first().json.total_rows;\nconst totalRows = parseInt(totalRowsResult);\nconst batchSize = 500;\nconst totalBatches = Math.ceil(totalRows / batchSize);\n\n// Simple and reliable date formatting function\nconst dateFormat = (dateInput) => {\n  let date;\n  \n  if (typeof dateInput === 'string') {\n    // If it's already in YYYY-MM-DD format, return as-is\n    if (/^\\d{4}-\\d{2}-\\d{2}$/.test(dateInput)) {\n      return dateInput;\n    }\n    // Parse string date\n    date = new Date(dateInput + 'T00:00:00Z');\n  } else {\n    date = dateInput;\n  }\n  \n  // Format to YYYY-MM-DD\n  const year = date.getUTCFullYear();\n  const month = String(date.getUTCMonth() + 1).padStart(2, '0');\n  const day = String(date.getUTCDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\n// Calculate dates using string manipulation for reliability\nconst todayFormatted = dateFormat(inputDate);\n\n// Parse the date properly for calculations\nconst todayParts = todayFormatted.split('-');\nconst today = new Date(parseInt(todayParts[0]), parseInt(todayParts[1]) - 1, parseInt(todayParts[2]));\n\nconst date3DaysAgo = new Date(today);\ndate3DaysAgo.setDate(today.getDate() - 3);\n\nconst yesterday = new Date(today);\nyesterday.setDate(today.getDate() - 1);\n\n// Initialize workflow state\nreturn [{\n  json: {\n    taskId: taskId,\n    inputDate: todayFormatted,\n    startDate: dateFormat(date3DaysAgo),\n    endDate: dateFormat(yesterday),\n    currentBatch: 1,\n    totalBatches: totalBatches,\n    batchSize: batchSize,\n    totalRows: totalRows,\n    offset: 0,\n    fileName: `/files/stock_prediction_${todayFormatted}.json`,\n    isFirstBatch: true\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1140,
        180
      ],
      "id": "3e256d67-df6d-4786-9311-7426dcbeb9a9",
      "name": "Initialize Pagination"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT index, name, stock\nFROM amazon_dataset\nORDER BY index\nLIMIT {{ $json.batchSize }}\nOFFSET {{ $json.offset }};",
        "options": {}
      },
      "name": "Postgres Product Batch",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -920,
        80
      ],
      "id": "eeef1fd6-0bd9-4ac9-8c3c-4988986a770b"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT name, SUM(quantity_sold) AS total_sold_3days, AVG(quantity_sold) AS avg_daily_sold_3days\nFROM daily_sales\nWHERE date >= '{{ $('Initialize Pagination').item.json.startDate }}' AND date <= '{{ $('Initialize Pagination').item.json.endDate }}'\nAND name IN (\n  SELECT name \n  FROM amazon_dataset \n  ORDER BY index \n  LIMIT {{ $('Initialize Pagination').item.json.batchSize }}\n  OFFSET {{ $('Initialize Pagination').item.json.offset }}\n)\nGROUP BY name\nORDER BY name;",
        "options": {}
      },
      "name": "Postgres Sales Batch",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -920,
        400
      ],
      "id": "82da18bf-3e8d-4aca-a169-c1b5ad7a8143"
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "name",
              "field2": "name"
            }
          ]
        },
        "options": {}
      },
      "name": "Merge Product and Sales",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        -700,
        0
      ],
      "id": "67b80e2d-d3ba-476b-bb9a-cb858998c4fd"
    },
    {
      "parameters": {
        "jsCode": "// Get merged data and pagination info\nconst mergedData = $input.all().map(i => i.json);\nconst paginationData = $('Initialize Pagination').first().json;\n\nconst batchPredictions = [];\n\n// Process predictions for current batch\nfor (const item of mergedData) {\n  const stock = item.stock !== undefined ? Number(item.stock) : 0;\n  const avgDailySold = item.avg_daily_sold_3days !== undefined ? Number(item.avg_daily_sold_3days) : 0;\n\n  const predictedStock = stock - (avgDailySold * 3);\n\n  batchPredictions.push({\n    index: item.index || 0,\n    name: item.name || '-',\n    stock: stock,\n    avg_daily_sold_3days: avgDailySold,\n    predicted_stock_after_3days: Number(predictedStock.toFixed(2)),\n    status: predictedStock > 0 ? 'sufficient' : 'insufficient'\n  });\n}\n\n// Create batch result with metadata for file writing\nconst batchResult = {\n  batchNumber: paginationData.currentBatch,\n  totalBatches: paginationData.totalBatches,\n  batchSize: paginationData.batchSize,\n  startIndex: paginationData.offset + 1,\n  endIndex: Math.min(paginationData.offset + paginationData.batchSize, paginationData.totalRows),\n  predictions: batchPredictions\n};\n\nreturn [{\n  json: {\n    ...paginationData,\n    batchResult: batchResult,\n    processedInBatch: batchPredictions.length\n  }\n}];"
      },
      "name": "Batch Prediction",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -480,
        0
      ],
      "id": "9aede35a-5a74-4ac8-a13a-e8f6dd135e70"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "c2b6cbd1-a12f-4b77-81bc-16f67d5dff67",
              "leftValue": "={{ $('Is First Batch?').item.json.currentBatch }}",
              "rightValue": "={{ $('Is First Batch?').item.json.totalBatches }}",
              "operator": {
                "type": "number",
                "operation": "lte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "Check More Batches",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        840,
        0
      ],
      "id": "ea9ae9e9-68b6-4543-845f-c3588d9a3a2b"
    },
    {
      "parameters": {
        "jsCode": "// Prepare next batch\nconst data = $input.first().json;\n\nconst nextBatch = data.currentBatch + 1;\nconst nextOffset = data.currentBatch * data.batchSize;\n\nreturn [{\n  json: {\n    ...data,\n    currentBatch: nextBatch,\n    offset: nextOffset,\n    isFirstBatch: false // No longer first batch\n  }\n}];"
      },
      "name": "Prepare Next Batch",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        200
      ],
      "id": "8ed88bdb-3cfa-42df-b1f3-1d53fb48674b"
    },
    {
      "parameters": {
        "jsCode": "// Final processing - close JSON structure and prepare completion notification\nconst data = $input.first().json;\n\n// Close the JSON structure by appending closing brackets\nconst closingContent = '\\n  ]\\n}';\n\nreturn [{\n  json: {\n    ...data,\n    closingContent: closingContent,\n    completionMessage: {\n      task_id: data.taskId,\n      status: 'Selesai',\n      last_message: 'prediksi selesai, silahkan cek summary'\n    }\n  }\n}];"
      },
      "name": "Final Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        -60
      ],
      "id": "dd8584da-4c1f-4158-b2fd-3b23b7a7e68d"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://flask.ibnukhaidar.live/",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1500,
        -60
      ],
      "id": "b5a6dea4-139f-4a1f-843c-6f9c8c9426b6",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "={{ $json.jsonContent }}",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        180,
        100
      ],
      "id": "f684d287-a04a-4c5c-a837-a679287ea7ec",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $('Is First Batch?').item.json.fileName }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        400,
        -100
      ],
      "id": "62877c1c-885b-4a84-918d-56422b978887",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        180,
        -100
      ],
      "id": "81ee3dc0-afbf-4b62-9b56-b7a5c83b06ed",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        620,
        0
      ],
      "id": "b55de1c7-0c72-4778-90ef-d7ea8ef07900",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "operation": "append"
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1280,
        -60
      ],
      "id": "842ece53-94c8-48e1-907c-fe0337e9f35f",
      "name": "Close JSON File",
      "disabled": true
    }
  ],
  "connections": {
    "Get Total Rows": {
      "main": [
        [
          {
            "node": "Initialize Pagination",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare JSON Content": {
      "main": [
        [
          {
            "node": "Is First Batch?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is First Batch?": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append Batch": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Get Total Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Pagination": {
      "main": [
        [
          {
            "node": "Postgres Product Batch",
            "type": "main",
            "index": 0
          },
          {
            "node": "Postgres Sales Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Product Batch": {
      "main": [
        [
          {
            "node": "Merge Product and Sales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Sales Batch": {
      "main": [
        [
          {
            "node": "Merge Product and Sales",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Product and Sales": {
      "main": [
        [
          {
            "node": "Batch Prediction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch Prediction": {
      "main": [
        [
          {
            "node": "Prepare JSON Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check More Batches": {
      "main": [
        [
          {
            "node": "Prepare Next Batch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Final Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Next Batch": {
      "main": [
        [
          {
            "node": "Postgres Product Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Processing": {
      "main": [
        [
          {
            "node": "Close JSON File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Append Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Close JSON File": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Check More Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "ff49dd25-fedb-4f26-b347-8f1a9d5f3867",
  "triggerCount": 0,
  "tags": []
}