{
  "createdAt": "2025-06-21T08:22:56.275Z",
  "updatedAt": "2025-06-21T08:22:56.275Z",
  "id": "bJejuVHXQ3xZGFBb",
  "name": "ai-agent-2-v2-gpt",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "agentic-ai-2-paging",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1540,
        140
      ],
      "id": "c22ce5ca-8b6a-446f-958f-0c78816cf7ab",
      "name": "Webhook6",
      "webhookId": "0909f34c-da13-493d-984e-901eb3972a1e"
    },
    {
      "parameters": {
        "jsCode": "// Initialize pagination parameters\nconst inputDate = $input.first().json.body.date; // format: 'YYYY-MM-DD'\nif (!inputDate) throw new Error('Date not found in input JSON.');\n\nconst batchSize = 500; // Process 500 products per batch\nconst totalRows = 384827; // Total number of products\nconst totalBatches = Math.ceil(totalRows / batchSize);\n\nconst today = new Date(inputDate);\nconst dateFormat = (date) => date.toISOString().split('T')[0];\n\nconst date3DaysAgo = new Date(today);\ndate3DaysAgo.setDate(today.getDate() - 3);\nconst yesterday = new Date(today);\nyesterday.setDate(today.getDate() - 1);\n\n// Initialize workflow state\nreturn [{\n  json: {\n    inputDate: dateFormat(today),\n    startDate: dateFormat(date3DaysAgo),\n    endDate: dateFormat(yesterday),\n    currentBatch: 1,\n    totalBatches: totalBatches,\n    batchSize: batchSize,\n    totalRows: totalRows,\n    allPredictions: [], // Store all predictions\n    offset: 0\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1320,
        140
      ],
      "id": "386b73ab-ef1a-42d4-9322-ff7f17c480b6",
      "name": "Initialize Pagination1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT index, name, stock\nFROM amazon_dataset\nORDER BY index\nLIMIT {{ $json.batchSize }}\nOFFSET {{ $json.offset }};",
        "options": {}
      },
      "name": "Postgres Product Batch1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -1100,
        140
      ],
      "id": "2498830b-fd19-4647-b643-44873b537b2f"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT name, SUM(quantity_sold) AS total_sold_3days, AVG(quantity_sold) AS avg_daily_sold_3days\nFROM daily_sales\nWHERE date >= '{{ $('Initialize Pagination1').item.json.startDate }}' AND date <= '{{ $('Initialize Pagination1').item.json.endDate }}'\nAND name IN (\n  SELECT name \n  FROM amazon_dataset \n  ORDER BY index \n  LIMIT {{ $('Initialize Pagination1').item.json.batchSize }}\n  OFFSET {{ $('Initialize Pagination1').item.json.offset }}\n)\nGROUP BY name\nORDER BY name;",
        "options": {}
      },
      "name": "Postgres Sales Batch1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -880,
        200
      ],
      "id": "85066483-ba4f-4cc0-9382-9288d5a25397"
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "name",
              "field2": "name"
            }
          ]
        },
        "options": {}
      },
      "name": "Merge Product and Sales1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        -660,
        60
      ],
      "id": "a26eccc1-9843-407d-bc10-12904950727e"
    },
    {
      "parameters": {
        "jsCode": "// Get merged data and pagination info\nconst mergedData = $input.all().map(i => i.json);\nconst paginationData = $('Initialize Pagination1').first().json;\n\nconst batchPredictions = [];\n\nfor (const item of mergedData) {\n  const stock = item.stock !== undefined ? Number(item.stock) : 0;\n  const avgDailySold = item.avg_daily_sold_3days !== undefined ? Number(item.avg_daily_sold_3days) : 0;\n\n  const predictedStock = stock - (avgDailySold * 3);\n\n  batchPredictions.push({\n    index: item.index || 0,\n    name: item.name || '-',\n    stock: stock,\n    avg_daily_sold_3days: avgDailySold,\n    predicted_stock_after_3days: Number(predictedStock.toFixed(2)),\n    status: predictedStock > 0 ? 'sufficient' : 'insufficient'\n  });\n}\n\n// Combine with existing predictions\nconst allPredictions = [...paginationData.allPredictions, ...batchPredictions];\n\nreturn [{\n  json: {\n    ...paginationData,\n    batchPredictions: batchPredictions,\n    allPredictions: allPredictions,\n    processedCount: allPredictions.length\n  }\n}];"
      },
      "name": "Batch Prediction1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -440,
        60
      ],
      "id": "6ec4edbd-ab2f-4998-82fa-62e0aadd67ee"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "c2b6cbd1-a12f-4b77-81bc-16f67d5dff67",
              "leftValue": "={{ $json.currentBatch }}",
              "rightValue": "={{ $json.totalBatches }}",
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "Check More Batches1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -220,
        60
      ],
      "id": "d35ae804-08c0-49a8-b445-e94713f66e6b"
    },
    {
      "parameters": {
        "jsCode": "// Prepare next batch\nconst data = $input.first().json;\n\nconst nextBatch = data.currentBatch + 1;\nconst nextOffset = data.currentBatch * data.batchSize;\n\nreturn [{\n  json: {\n    ...data,\n    currentBatch: nextBatch,\n    offset: nextOffset\n  }\n}];"
      },
      "name": "Prepare Next Batch1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        240
      ],
      "id": "5f4d72e5-7ec2-461e-8f2b-92466cd93e90"
    },
    {
      "parameters": {
        "jsCode": "// Final processing - save all predictions to JSON\nconst data = $input.first().json;\nconst allPredictions = data.allPredictions;\n\n// Create final JSON structure\nconst finalResult = {\n  processedAt: '2025-06-19 16:56:53',\n  processedBy: 'Cleign1',\n  date: data.inputDate,\n  totalProcessed: allPredictions.length,\n  totalBatches: data.totalBatches,\n  batchSize: data.batchSize,\n  summary: {\n    sufficient: allPredictions.filter(p => p.status === 'sufficient').length,\n    insufficient: allPredictions.filter(p => p.status === 'insufficient').length\n  },\n  predictions: allPredictions\n};\n\nreturn [{\n  json: finalResult\n}];"
      },
      "name": "Final Processing1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "fe209dd6-ae4f-4be1-af28-fb291e93191b"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/files/stock_prediction_{{ $json.date }}.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        220,
        0
      ],
      "id": "5a2d7456-4ca2-44ec-8233-8c2ef78fb9fd",
      "name": "Save to JSON File1"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "name": "Respond to Webhook3",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        440,
        0
      ],
      "id": "366b3e3e-0382-4ce6-be11-1d94c80c5ded"
    }
  ],
  "connections": {
    "Webhook6": {
      "main": [
        [
          {
            "node": "Initialize Pagination1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Pagination1": {
      "main": [
        [
          {
            "node": "Postgres Product Batch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Product Batch1": {
      "main": [
        [
          {
            "node": "Postgres Sales Batch1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Product and Sales1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Sales Batch1": {
      "main": [
        [
          {
            "node": "Merge Product and Sales1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Product and Sales1": {
      "main": [
        [
          {
            "node": "Batch Prediction1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch Prediction1": {
      "main": [
        [
          {
            "node": "Check More Batches1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check More Batches1": {
      "main": [
        [
          {
            "node": "Prepare Next Batch1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Final Processing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Next Batch1": {
      "main": [
        [
          {
            "node": "Postgres Product Batch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Processing1": {
      "main": [
        [
          {
            "node": "Save to JSON File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to JSON File1": {
      "main": [
        [
          {
            "node": "Respond to Webhook3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "8afa8925-285b-4763-8270-5ef430638ae4",
  "triggerCount": 0,
  "tags": []
}